class Parrot:
    # class attribute
    name = ""
    age = 0
# create parrot1 object
parrot1 = Parrot()
parrot1.name = "mithu"
parrot1.age = 1
# create another object parrot2
parrot2 = Parrot()
parrot2.name = "pithu"
parrot2.age = 0.5
# access attributes
print(parrot1.name, "is", parrot1.age, "years old")
print(parrot2.name, "is", parrot2.age, "years old")
___________________________________________________________________________________________________________________________________________________________________________

class mynumber:
	def __init__(self, value): # constructor
		self.value = value

	def print_value(self):
		print(self.value)

obj1 = mynumber(17)   # constructor automatically called
obj1.print_value()
___________________________________________________________________________________________________________________________________________________________________________

# base class
class Animal:
    def eat(self):
        print( "I can eat!")
    def sleep(self):
        print("I can sleep!")
# derived class
class Dog(Animal):    # new class Dog inherits Animal stuff
    def bark(self):
        print("I can bark! Woof woof!!")

# Create object of the Dog class
dog1 = Dog()
# Calling members of the base class
dog1.eat()
dog1.sleep()
# Calling member of the derived class
dog1.bark();
____________________________________________________________________________________________________________________________________________________________________________

class Computer:
    def __init__(self):
        self.__maxprice = 900 # _maxprice is a private variable
    def sell(self):
        print("Selling Price: ",self.__maxprice)
    def setMaxPrice(self, price):
        self.__maxprice = price

c = Computer()
c.sell()
# using setter function
c.setMaxPrice(1000)
c.sell()
____________________________________________________________________________________________________________________________________________________________________________

class Polygon:
    # method to render a shape
    def render(self):
        print("Rendering Polygon...")

class Square(Polygon):   # inheriting Polygon class
    # renders Square
    def render(self):
        print("Rendering Square...")

class Circle(Polygon):  # inheriting Polygon class
    # renders circle
    def render(self):
        print("Rendering Circle...")

# create an object of Square
s1 = Square()
s1.render()
# create an object of Circle
c1 = Circle()
c1.render()
___________________________________________________________________________________________________________________________________________________________________________



